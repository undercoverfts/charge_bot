import logging
from aiogram.dispatcher.filters import Command
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import  ReplyKeyboardRemove
import btn as nav
import time
from aiogram.utils.markdown import hlink
import config as cfg

API_TOKEN = cfg.Token

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

#loop for cheks sub on chanels
async def check_sub_channels (channels, user_id):
     for channel in channels:
         chat_member = await bot.get_chat_member(chat_id=channel[1], user_id=user_id)
         if chat_member['status'] == 'left':
             return False
     return True


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply(
"""–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ '–ó–∞—Ä—è–¥–∏ –æ–Ω–ª–∞–π–Ω'.

–ú—ã –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ–Ω–ª–∞–π–Ω –∑–∞—Ä—è–¥–∫–∏ –Ω–∞ —Å–≤–æ–π Iphone / Android —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è! 

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü–†–û–î–û–õ–ñ–ò–¢–¨" üëá

–° —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –∞—Å—Å–∏—Å–µ–Ω—Ç –ú–∞–∫—Å–∏–º üòâ""", 
reply_markup = nav.kb_klient)
    

@dp.message_handler()
async def echo(message: types.Message):
    if message.text == "–ü–†–û–î–û–õ–ñ–ò–¢–¨":
        await message.answer(
"""–≠—Ç–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ú–∞–∫—Å–∏–º üëã

–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É ‚¨áÔ∏è""", 
reply_markup=nav.mainmenu)

@dp.callback_query_handler(text="btnos")
async def ios(message: types.Message):
    await message.message.answer("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...",
    reply_markup=ReplyKeyboardRemove())
    time.sleep(5)
    await message.message.answer("""
–£—Å–ø–µ—à–Ω–æ! –ú—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ —Ç–≤–æ—é –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–∞—á–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è! 
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç—Å—Ä—É–∫—Ü–∏–∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É '–ü–û–õ–£–ß–ò–¢–¨'""", 
reply_markup = nav.btnmaint)

@dp.callback_query_handler(text="btnandroid")
async def android(message: types.Message):
    await message.message.answer("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...",
    reply_markup=ReplyKeyboardRemove())
    time.sleep(5)
    await message.message.answer("""
–£—Å–ø–µ—à–Ω–æ! –ú—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ —Ç–≤–æ—é –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–∞—á–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è! 
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç—Å—Ä—É–∫—Ü–∏–∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É '–ü–û–õ–£–ß–ò–¢–¨'""",
reply_markup=nav.btnmaint)

@dp.callback_query_handler(text="btnmain")
async def mainbtn(message: types.Message):

    await message.message.answer("–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ üëâ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã-—Å–ø–æ–Ω—Å–æ—Ä—ã,\n–ë–ª–∞–≥–æ–¥–∞—Ä—è –∏–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –ù–∏ –∑–∞ —á—Ç–æ –ø–ª–∞—Ç–∏—Ç—å –Ω–µ–Ω—É–∂–Ω–æ üòâ", reply_markup=nav.showChannels())
@dp.callback_query_handler(text="btndone")
async def subsdone(message: types.Message):
    await message.message.answer("""
–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü–ª–∞–≥–∏–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª—å—à–µ 2-3 –¥–Ω–µ–π.

–í—Å–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ üòâ

üìç–¢–∞–∫–∂–µ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏ –Ω–µ–ª—å–∑—è –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–æ–≤ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, –∏–Ω–∞—á–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ —Ç—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏—à—å—Å—è –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏! 

–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –±–æ—Ç –°—Ç–∏–≤–µ–Ω —Ö–µ–ª–ø–µ—Ä ‚ù§Ô∏è
""")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
